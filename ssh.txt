-------------------------------------------------------------------------------
 As the administrator of an SSH server, to grant a client SSH access to the
 server, you need to:
 ==========================================================================
 1. Request the public key part of a key pair generated by the client.
 2. Append the received public key to the "authorized_keys" file. This file is
located under "~/.ssh", where "~" is the home directory of _the user on the
server_ which the client will establish an SSH connection "as". As you know,
every action on a UNIX machine is associated with a user. SSH is no exception
to this rule. Hence, when someone wants to establish an SSH connection to an
SSH server, they must specify "to which user _of the server_" they want to
establish an SSH connection to. If the client omits the username part while
establishing an SSH connection, the client's SSH client software will assume
that the client meant to use the username which he is currently logged in as on
his local machine.

 As the administrator of an SSH server, to share the SSH connection
 credidentials with a client, you need to give the client the:
 ==================================================================
 1. Username of the user _on the server_ to which the client will SSH "as". The
client will SSH to the server "as this user".
 2. IP address (or host name) of the SSH server.
 3. Port number on which the SSHd runs (this is almost always port 22, but you
can give this for being explicit). SSH clients will try to connect to port 22 by
default.
 4. Public key of _the SSH server_. Like clients, SSH servers have key pairs
too. That is, when the server is sending the client some information, the
server encrypts this information using the public key of the user. The public
key of the user is located at "~/.ssh/authorized_keys" file on the server,
where "~" is the home directory of the user which the client is "SSHing as".
Since the client has the private key that is the pair of this public key, the
client can decrypt what is sent by the server.
 In the exact same logic, when the client sends something to an SSH server, the
client's SSH client encrypts what is being sent using the "server's public key".
Since the private key which can decrypt this information is owned only by the
server, this allows the client to send information securely to an SSH server.
 So, in order for a client to send something to an SSH server, the client has
to know the public key of the SSH server. Also, the client _must be sure_ that
this public key _indeed_ belongs to the SSH server which the client wants to
connect to. Because if this public key belongs to another SSH server, the
client will be connecting to this unkown SSH server. And this unkown SSH server
may be trying to obtain sensitive information from the client.
 So, the only way the client can make sure that he is SSHing to the correct SSH
server is that the client obtains the _public key of the server_ from a
_trusted source_ in an _untampered manner_ (that is, with integrity, but not
necessarly with confidentiality). This step is very important to protect the
client from SSHing to a rogue server or being subject of a MitM attack.

 The public key of an "SSH server" is located at:
    /etc/ssh/ssh_host_(rsa|dsa|ecdsa|ed25519)_key.pub
 You need to give a copy of this file, by prepending the IP address (or host
name) of the SSH server and a space to this file. That is, if this file
contains:
    ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNboR/cPepWXWbF7FYaJwDaTbO0vToH2Qg0LXv2rGNm3XvQ5GZ/awKJGhwiLosOsZA9Yo9CedfkN7UwoOGki5tk= root@ubuntu-512mb-fra1-01
 You need to give the client the string:
    <ip_address_of_the_SSH_server> ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNboR/cPepWXWbF7FYaJwDaTbO0vToH2Qg0LXv2rGNm3XvQ5GZ/awKJGhwiLosOsZA9Yo9CedfkN7UwoOGki5tk=
 And tell the client to append this string to the "known_hosts" file located
under the ".ssh" directory, which is in turn located under the home directory
of their _client machines_. This way, they will know the public key of the SSH
server which they want to connect to and not be subject of any MitM attacks.
-------------------------------------------------------------------------------
 As you know, everything in UNIX is user based. That is, every activity
performed on a UNIX system is associated with a user. SSH is no exception to
this.

 When you SSH to a machine, you always SSH as a user. If you don't explicitly
specify the user, SSH command assumes the username on the local system. For
example, if your username is "a_username" and if you SSH as:
    ssh 192.168.1.1
this is equivalent to:
    ssh a_username@192.168.1.1

 Now, there are two important files in every user's home directory. These are:
    ~/.ssh/authorized_keys
    ~/.ssh/id_rsa

 The former (~/.ssh/authorized_keys) is used when someone SSH'es to this
machine as this user. The remote person presents a private key while SSH'ing,
and if there is a public key in "~/.ssh/authorized_keys" (on the machine on
which the SSH server runs) that corresponds to this private key, the remote
user is granted access.

 The latter (~/.ssh/id_rsa) is the private key of the user. It is used when
SSH'ing to a remote machine which runs an SSH daemon (that is, 'sshd'). The
local user presents this private key to the remote SSH server, and the SSH
server checks if the user that is being SSH'ed to has specified the public
key part of this private key in "~/.ssh/authorized_keys" file. If yes,
access is granted to the remote user.
-------------------------------------------------------------------------------

